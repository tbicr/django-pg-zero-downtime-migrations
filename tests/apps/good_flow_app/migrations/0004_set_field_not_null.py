# Generated by Django 3.1 on 2019-09-21 20:16

from django.db import IntegrityError, migrations, models


def flush_deferred_sql(apps, schema_editor):
    for sql in schema_editor.deferred_sql:
        schema_editor.execute(sql)


def update_objects(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    TestTable = apps.get_model('good_flow_app', 'TestTable')
    TestTable.objects.using(db_alias).update(field=0)


def insert_objects_and_not_null_check(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    TestTable = apps.get_model('good_flow_app', 'TestTable')
    instance = TestTable.objects.using(db_alias).create(test_field_int=1)
    assert instance.field == 0
    instance.delete()
    try:
        TestTable.objects.using(db_alias).create(test_field_int=1, field=None)
        assert False
    except IntegrityError:
        pass


class Migration(migrations.Migration):

    atomic = False  # avoid transaction issue for default django backend check

    dependencies = [
        ('good_flow_app', '0003_set_field_default'),
    ]

    operations = [
        migrations.RunPython(update_objects, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='testtable',
            name='field',
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(flush_deferred_sql, migrations.RunPython.noop),
        migrations.RunPython(insert_objects_and_not_null_check, migrations.RunPython.noop),
    ]
